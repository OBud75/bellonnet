1.FileSystem

1) mkdir assets

2) cd assets/ 
   touch img_{1..10}.png

3) echo "Hello, world" > du_texte.txt

4) for i in img_*.png; do mv "$i" "${i%.png}.jpeg"; done

5) mkdir medias

6) .png : Format d'image sans perte
   .jpeg : Format d'image compressé avec perte
   .txt : Format de fichier texte qui sert uniquement à créer du texte brut

# -> Oui. Sur windows cela permet à l'ordinateur de savoir avec quel programme il peut ouvrir le fichier,
# mais sur Linux c'est surtout l'en tête du fichier qui sert à cela.

# Par contre dans certains cas cela aide le programme lancé pour lire le fichier
# Un bon exemple est la manière dont certaines applications graphiques ou multimédias sous Linux se comportent :
# Si on essaiee d’ouvrir un fichier .jpg avec un éditeur de texte comme nano, il ne prendra pas en compte l’extension et affichera du texte illisible.
# Par contre, si on le renomme en .txt et qu'on tente de l’ouvrir avec "Eye of GNOME" (visionneuse d'images), il refusera de le charger.

7) echo -e '#!/usr/bin/bash\n\necho "Hello world"' > script
   chmod +x script
   
8) #!/usr/bin/bash est un shebang. Cela indique quel interpréteur utiliser pour exécuter le script. Alors que avec bash script, on spécifie manuellement l'interpréteur bash donc pas besoin du shebang

# Pour aller un peu plus loin : 
# Avec ./script, le noyau lit la première ligne pour déterminer quel interpréteur lancer et transmet le script en argument.
# La présence des permissions d'exécution est indispensable car le système vérifie que le fichier est exécutable.
# En lançant le script avec la commande bash script, vous invoquez directement Bash pour qu’il interprète le contenu du fichier.
# Dans ce cas, la ligne shebang est ignorée et il n’est pas nécessaire que le fichier possède les droits d’exécution.
# Bash lit simplement le contenu du fichier grâce aux permissions de lecture.
